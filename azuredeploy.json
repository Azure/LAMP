{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "_artifactsLocation": {
            "type": "string",
            "metadata": {
                "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
            },
            "defaultValue": "https://raw.githubusercontent.com/ItalyPaleAle/LAMP/generalized/"
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "metadata": {
                "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
            },
            "defaultValue": ""
        },
        "applyScriptsSwitch": {
            "defaultValue": true,
            "metadata": {
                "description": "Switch to process or bypass all scripts/extensions"
            },
            "type": "bool"
        },
        "azureBackupSwitch": {
            "defaultValue": false,
            "metadata": {
                "description": "Switch to configure AzureBackup and enlist VM's"
            },
            "type": "bool"
        },
        "redisDeploySwitch": {
            "defaultValue": false,
            "metadata": {
                "description": "Switch to deploy a Redis Cache or not."
            },
            "type": "bool"
        },
        "vnetGwDeploySwitch": {
            "defaultValue": false,
            "metadata": {
                "description": "Switch to deploy a virtual network gateway or not"
            },
            "type": "bool"
        },
        "htmlLocalCopySwitch": {
            "defaultValue": true,
            "metadata": {
                "description": "Switch to create a local copy of /azlamp/html or not"
            },
            "type": "bool"
        },
        "ddosSwitch": {
            "defaultValue": false,
            "metadata": {
                "description": "Switch to create a DDoS protection plan"
            },
            "type": "bool"
        },
        "enableAccelNwForCtlrVmSwitch": {
            "defaultValue": false,
            "metadata": {
                "description": "Switch to enable Azure Accelerated Networking on the controller VM. Default to false because currently the default controller VM SKU (D1) doesn't support AN. Change this to true if you set the controller VM SKU to eligibible ones (e.g., D2) for better performance."
            },
            "type": "bool"
        },
        "enableAccelNwForOtherVmsSwitch": {
            "defaultValue": true,
            "metadata": {
                "description": "Switch to enable Azure Accelerated Networking on all other VMs. Default to true because currently the default controller VM SKU for all other VMS (D2) does support AN. Change this to false if you set the SKU of any other VMs to an ineligibible one (e.g., D1) to avoid deployment failure."
            },
            "type": "bool"
        },
        "httpsTermination": {
            "allowedValues": [
                "VMSS",
                "AppGw",
                "None"
            ],
            "defaultValue": "VMSS",
            "metadata": {
                "description": "Indicates where https termination occurs. 'VMSS' is for https termination at the VMSS instance VMs (using nginx https proxy). 'AppGw' is for https termination with an Azure Application Gateway. When selecting this, you need to specify all appGw* parameters. 'None' is for testing only with no https. 'None' may not be used with a separately configured https termination layer."
            },
            "type": "string"
        },
        "siteURL": {
            "defaultValue": "www.example.org",
            "metadata": {
                "description": "URL for LAMP site"
            },
            "type": "string"
        },
        "sshPublicKey": {
            "metadata": {
                "description": "ssh public key"
            },
            "type": "string"
        },
        "sshUsername": {
            "defaultValue": "azureadmin",
            "metadata": {
                "description": "ssh user name"
            },
            "type": "string"
        },
        "controllerVmSku": {
            "defaultValue": "Standard_DS1_v2",
            "metadata": {
                "description": "VM size for the controller VM"
            },
            "type": "string"
        },
        "autoscaleVmSku": {
            "defaultValue": "Standard_DS2_v2",
            "metadata": {
                "description": "VM size for autoscaled web VMs"
            },
            "type": "string"
        },
        "autoscaleVmCountMax": {
            "defaultValue": 10,
            "metadata": {
                "description": "Maximum number of autoscaled web VMs"
            },
            "type": "int"
        },
        "autoscaleVmCountMin": {
            "defaultValue": 1,
            "metadata": {
                "description": "Minimum (also initial) number of autoscaled web VMs"
            },
            "type": "int"
        },
        "osDiskStorageType": {
            "defaultValue": "Premium_LRS",
            "allowedValues": [
                "Premium_LRS",
                "Standard_LRS"
            ],
            "metadata": {
                "description": "Azure storage type for all VMs' OS disks. With htmlLocalCopySwith true, Premium_LRS (SSD) is strongly recommended, as PHP files will be served from OS disks."
            },
            "type": "string"
        },
        "dbServerType": {
            "defaultValue": "mysql",
            "allowedValues": [
                "postgres",
                "mysql",
                "mssql"
            ],
            "metadata": {
                "description": "Database type"
            },
            "type": "string"
        },
        "dbLogin": {
            "defaultValue": "dbadmin",
            "metadata": {
                "description": "Database admin username"
            },
            "type": "string"
        },
        "mysqlPgresVcores": {
            "allowedValues": [
                1,
                2,
                4,
                8,
                16,
                32
            ],
            "defaultValue": 2,
            "metadata": {
                "description": "MySql/Postgresql vCores. For Basic tier, only 1 & 2 are allowed. For GeneralPurpose tier, 2, 4, 8, 16, 32 are allowed. For MemoryOptimized, 2, 4, 8, 16 are allowed."
            },
            "type": "int"
        },
        "mysqlPgresStgSizeGB": {
            "defaultValue": 125,
            "minValue": 5,
            "maxValue": 1024,
            "metadata": {
                "description": "MySql/Postgresql storage size in GB. Minimum 5GB, increase by 1GB, up to 1TB (1024 GB)"
            },
            "type": "int"
        },
        "mysqlPgresSkuTier": {
            "allowedValues": [
                "Basic",
                "GeneralPurpose",
                "MemoryOptimized"
            ],
            "defaultValue": "GeneralPurpose",
            "metadata": {
                "description": "MySql/Postgresql sku tier"
            },
            "type": "string"
        },
        "mysqlPgresSkuHwFamily": {
            "allowedValues": [
                "Gen4",
                "Gen5"
            ],
            "defaultValue": "Gen5",
            "metadata": {
                "description": "MySql/Postgresql sku hardware family. Central US is Gen4 only, so make sure to change this parameter to Gen4 if your deployment is on Central US."
            },
            "type": "string"
        },
        "mysqlVersion": {
            "allowedValues": [
                "5.6",
                "5.7"
            ],
            "defaultValue": "5.7",
            "metadata": {
                "description": "Mysql version"
            },
            "type": "string"
        },
        "postgresVersion": {
            "allowedValues": [
                "9.5",
                "9.6"
            ],
            "defaultValue": "9.6",
            "metadata": {
                "description": "Postgresql version"
            },
            "type": "string"
        },
        "sslEnforcement": {
            "allowedValues": [
                "Disabled",
                "Enabled"
            ],
            "defaultValue": "Disabled",
            "metadata": {
                "description": "MySql/Postgresql SSL connection"
            },
            "type": "string"
        },
        "mssqlDbServiceObjectiveName": {
            "allowedValues": [
                "S1",
                "S2",
                "S3",
                "S4",
                "S5",
                "S6",
                "S7",
                "S9"
            ],
            "defaultValue": "S1",
            "metadata": {
                "description": "MS SQL database service object names"
            },
            "type": "string"
        },
        "mssqlDbSize": {
            "allowedValues": [
                "100MB",
                "250MB",
                "500MB",
                "1GB",
                "2GB",
                "5GB",
                "10GB",
                "20GB",
                "30GB",
                "40GB",
                "50GB",
                "100GB",
                "250GB",
                "300GB",
                "400GB",
                "500GB",
                "750GB",
                "1024GB"
            ],
            "defaultValue": "250GB",
            "metadata": {
                "description": "MS SQL database size"
            },
            "type": "string"
        },
        "mssqlDbEdition": {
            "allowedValues": [
                "Basic",
                "Standard"
            ],
            "defaultValue": "Standard",
            "metadata": {
                "description": "MS SQL DB edition"
            },
            "type": "string"
        },
        "mssqlVersion": {
            "allowedValues": [
                "12.0"
            ],
            "defaultValue": "12.0",
            "metadata": {
                "description": "Mssql version"
            },
            "type": "string"
        },
        "fileServerType": {
            "defaultValue": "nfs",
            "allowedValues": [
                "gluster",
                "nfs",
                "nfs-ha",
                "nfs-byo"
            ],
            "metadata": {
                "description": "File server type: GlusterFS, NFS, and NFS-HA (2-VM highly available NFS cluster)"
            },
            "type": "string"
        },
        "nfsByoIpExportPath": {
            "defaultValue": "",
            "metadata": {
                "description": "IP address and export path of the BYO-NFS share when fileServerType == nfs-byo. E.g., 172.16.1.8:/msazure"
            },
            "type": "string"
        },
        "fileServerDiskSize": {
            "defaultValue": 127,
            "metadata": {
                "description": "Size per disk for gluster nodes or nfs server"
            },
            "type": "int"
        },
        "fileServerDiskCount": {
            "defaultValue": 4,
            "minValue": 2,
            "maxValue": 8,
            "metadata": {
                "description": "Number of disks in raid0 per gluster node or nfs server"
            },
            "type": "int"
        },
        "fileServerVmSku": {
            "defaultValue": "Standard_DS2_v2",
            "metadata": {
                "description": "VM size for the gluster or NFS-HA nodes"
            },
            "type": "string"
        },
        "keyVaultResourceId": {
            "defaultValue": "",
            "metadata": {
                "description": "(VMSS https termination only) Azure Resource Manager resource ID of the Key Vault in case you stored your SSL cert in an Azure Key Vault (Note that this Key Vault must have been pre-created on the same Azure region where this template is being deployed). Leave this blank if you didn't. Resource ID example: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/xxx/providers/Microsoft.KeyVault/vaults/yyy. This value can be obtained from keyvault.sh output if you used the script to store your SSL cert in your Key Vault."
            },
            "type": "string"
        },
        "sslCertKeyVaultURL": {
            "defaultValue": "",
            "metadata": {
                "description": "(VMSS https termination only) Azure Key Vault URL for your stored SSL cert. This value can be obtained from keyvault.sh output if you used the script to store your SSL cert in your Key Vault. This parameter is ignored if the keyVaultResourceId parameter is blank."
            },
            "type": "string"
        },
        "sslCertThumbprint": {
            "defaultValue": "",
            "metadata": {
                "description": "(VMSS https termination only) Thumbprint of your stored SSL cert. This value can be obtained from keyvault.sh output if you used the script to store your SSL cert in your Key Vault. This parameter is ignored if the keyVaultResourceId parameter is blank."
            },
            "type": "string"
        },
        "caCertKeyVaultURL": {
            "defaultValue": "",
            "metadata": {
                "description": "(VMSS https termination only) Azure Key Vault URL for your stored CA (Certificate Authority) cert. This value can be obtained from keyvault.sh output if you used the script to store your CA cert in your Key Vault. This parameter is ignored if the keyVaultResourceId parameter is blank."
            },
            "type": "string"
        },
        "caCertThumbprint": {
            "defaultValue": "",
            "metadata": {
                "description": "(VMSS https termination only) Thumbprint of your stored CA cert. This value can be obtained from keyvault.sh output if you used the script to store your CA cert in your Key Vault. This parameter is ignored if the keyVaultResourceId parameter is blank."
            },
            "type": "string"
        },
        "appGwSslCertKeyVaultResourceId": {
            "defaultValue": "",
            "metadata": {
                "description": "(App Gateway https termination only) Azure Key Vault URL for your stored SSL cert, again for App Gateway https termination case only. (Note that this Key Vault must have been pre-created on the same Azure region where this template is being deployed). Leave this blank if you didn't. Resource ID example: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/xxx/providers/Microsoft.KeyVault/vaults/yyy."
            },
            "type": "string"
        },
        "appGwSslCertKeyVaultSecretName": {
            "defaultValue": "",
            "metadata": {
                "description": "(App Gateway https termination only) Name of the Azure Key Vault secret that's stored in the previously specified Key Vault as a PFX certificate (with no password) for your site's SSL cert. This secret must be pre-populated in the specified Key Vault with the matching name."
            },
            "type": "string"
        },
        "appGwSkuName": {
            "defaultValue": "Standard_Medium",
            "allowedValues": [
                "Standard_Small",
                "Standard_Medium",
                "Standard_Large",
                "WAF_Medium",
                "WAF_Large"
            ],
            "metadata": {
                "description": "(App Gateway https termination only) Name of the Applicate Gateway SKU"
            },
            "type": "string"
        },
        "appGwSkuTier": {
            "defaultValue": "Standard",
            "allowedValues": [
                "Standard",
                "WAF"
            ],
            "metadata": {
                "description": "(App Gateway https termination only) Tier of the Applicate Gateway"
            },
            "type": "string"
        },
        "appGwSkuCapacity": {
            "defaultValue": 2,
            "maxValue": 10,
            "minValue": 2,
            "metadata": {
                "description": "(App Gateway https termination only) Capacity instance count) of the Applicate Gateway"
            },
            "type": "int"
        },
        "storageAccountType": {
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_ZRS"
            ],
            "metadata": {
                "description": "Storage Account type. This storage account is only for the (currently disabled) Azure Files file share option"
            },
            "type": "string"
        },
        "customVnetId": {
            "defaultValue": "",
            "metadata": {
                "description": "Azure Resource ID of the Azure virtual network where you want to deploy your LAMP resources. A vnet resource ID is of the following format: /subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx/resourceGroups/gggg/providers/Microsoft.Network/virtualNetworks/vvvv. Note that this virtual network must be on the same Azure location as this template deployment location. If this parameter is blank, a new Azure virtual network will be created and used. In that case, the address space of the newly created virtual network will be */16 of the following vNetAddressSpace parameter value below."
            },
            "type": "string"
        },
        "vNetAddressSpace": {
            "defaultValue": "172.31.0.0",
            "metadata": {
                "description": "Address range for the LAMP virtual network and various subnets - presumed /16 for a newly created vnet in case customVnetId is blank. Further subneting (a number of */24 subnets starting from the xxx.yyy.zzz.0/24 will be created on a newly created vnet or your BYO-vnet (specified in customVnetId parameter)."
            },
            "type": "string"
        },
        "gatewayType": {
            "allowedValues": [
                "Vpn",
                "ER"
            ],
            "defaultValue": "Vpn",
            "metadata": {
                "description": "Virtual network gateway type"
            },
            "type": "string"
        },
        "vpnType": {
            "allowedValues": [
                "RouteBased",
                "PolicyBased"
            ],
            "defaultValue": "RouteBased",
            "metadata": {
                "description": "Virtual network gateway vpn type"
            },
            "type": "string"
        },
        "loadBalancerSku": {
            "defaultValue": "Basic",
            "allowedValues": [
                "Basic",
                "Standard"
            ],
            "metadata": {
                "description": "Loadbalancer SKU"
            },
            "type": "string"
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Azure Location for all resources."
            }
        }
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "name": "pid-e9147f02-a219-433d-8d7a-e3f2c14abd09",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "name": "networkTemplate",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "lampCommon": {
                        "value": "[variables('lampCommon')]"
                    }
                },
                "templateLink": {
                    "uri": "[concat(variables('lampCommon').baseTemplateUrl,'network.json',parameters('_artifactsLocationSasToken'))]"
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "name": "storageAccountTemplate",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "lampCommon": {
                        "value": "[variables('lampCommon')]"
                    }
                },
                "templateLink": {
                    "uri": "[concat(variables('lampCommon').baseTemplateUrl,'storageAccount.json',parameters('_artifactsLocationSasToken'))]"
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "dependsOn": [
                "Microsoft.Resources/deployments/networkTemplate"
            ],
            "name": "dbTemplate",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "lampCommon": {
                        "value": "[variables('lampCommon')]"
                    },
                    "lbPubIp": {
                        "value": "[reference('networkTemplate').outputs.lbPubIp.value]"
                    },
                    "ctlrPubIp": {
                        "value": "[reference('networkTemplate').outputs.ctlrPubIp.value]"
                    }
                },
                "templateLink": {
                    "uri": "[concat(variables('lampCommon').baseTemplateUrl, 'db-', parameters('dbServerType'), '.json', parameters('_artifactsLocationSasToken'))]"
                }
            }
        },
        {
            "condition": "[parameters('azureBackupSwitch')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "name": "recoveryTemplate",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "lampCommon": {
                        "value": "[variables('lampCommon')]"
                    }
                },
                "templateLink": {
                    "uri": "[concat(variables('lampCommon').baseTemplateUrl,'recoveryservices.json',parameters('_artifactsLocationSasToken'))]"
                }
            }
        },
        {
            "condition": "[parameters('redisDeploySwitch')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "name": "redisTemplate",
            "dependsOn": [
                "Microsoft.Resources/deployments/networkTemplate"
            ],
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "lampCommon": {
                        "value": "[variables('lampCommon')]"
                    },
                    "subnetIdRedis": {
                        "value": "[reference('networkTemplate').outputs.subnetIdRedis.value]"
                    }
                },
                "templateLink": {
                    "uri": "[concat(variables('lampCommon').baseTemplateUrl, 'redis.json', parameters('_artifactsLocationSasToken'))]"
                }
            }
        },
        {
            "condition": "[equals(parameters('fileServerType'),'gluster')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "dependsOn": [
                "Microsoft.Resources/deployments/networkTemplate",
                "Microsoft.Resources/deployments/recoveryTemplate"
            ],
            "name": "glusterTemplate",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "lampCommon": {
                        "value": "[variables('lampCommon')]"
                    },
                    "subnetIdSan": {
                        "value": "[reference('networkTemplate').outputs.subnetIdSan.value]"
                    }
                },
                "templateLink": {
                    "uri": "[concat(variables('lampCommon').baseTemplateUrl,'gluster.json',parameters('_artifactsLocationSasToken'))]"
                }
            }
        },
        {
            "condition": "[equals(parameters('fileServerType'),'nfs-ha')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "dependsOn": [
                "Microsoft.Resources/deployments/networkTemplate",
                "Microsoft.Resources/deployments/recoveryTemplate"
            ],
            "name": "nfsHaTemplate",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "subnetId": {
                        "value": "[reference('networkTemplate').outputs.subnetIdSan.value]"
                    },
                    "node0IPAddr": {
                        "value": "[variables('lampCommon').nfsHaNode0IP]"
                    },
                    "node1IPAddr": {
                        "value": "[variables('lampCommon').nfsHaNode1IP]"
                    },
                    "nfsClientsIPRange": {
                        "value": "[variables('lampCommon').nfsHaClientsIPRange]"
                    },
                    "lbFrontEndIpAddr": {
                        "value": "[variables('lampCommon').nfsHaLbIP]"
                    },
                    "enableAccelNwSwitch": {
                        "value": "[parameters('enableAccelNwForOtherVmsSwitch')]"
                    },
                    "vmSku": {
                        "value": "[variables('lampCommon').fileServerVmSku]"
                    },
                    "adminUserName": {
                        "value": "[parameters('sshUsername')]"
                    },
                    "sshPublicKey": {
                        "value": "[parameters('sshPublicKey')]"
                    },
                    "osType": {
                        "value": "[variables('lampCommon').osType]"
                    },
                    "osDiskStorageType": {
                        "value": "[parameters('osDiskStorageType')]"
                    },
                    "dataDiskCountPerVM": {
                        "value": "[parameters('fileServerDiskCount')]"
                    },
                    "dataDiskSizeInGB": {
                        "value": "[parameters('fileServerDiskSize')]"
                    },
                    "resourcesUniqueString": {
                        "value": "[variables('resourceprefix')]"
                    }
                },
                "templateLink": {
                    "uri": "[concat(variables('lampCommon').baseTemplateUrl, 'nfs-ha.json', parameters('_artifactsLocationSasToken'))]"
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "dependsOn": [
                "Microsoft.Resources/deployments/networkTemplate",
                "Microsoft.Resources/deployments/dbTemplate",
                "Microsoft.Resources/deployments/redisTemplate",
                "Microsoft.Resources/deployments/storageAccountTemplate"
            ],
            "name": "vmSetupParamsTemplate",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "lampCommon": {
                        "value": "[variables('lampCommon')]"
                    },
                    "dbFQDN": {
                        "value": "[reference('dbTemplate').outputs.dbFQDN.value]"
                    },
                    "storageAccountKey": {
                        "value": "[reference('storageAccountTemplate').outputs.storageAccountKey.value]"
                    },
                    "redisKey": {
                        "value": "[if(parameters('redisDeploySwitch'), reference('redisTemplate').outputs.redisKey.value, 'None')]"
                    }
                },
                "templateLink": {
                    "uri": "[concat(variables('lampCommon').baseTemplateUrl,'vmsetupparams.json',parameters('_artifactsLocationSasToken'))]"
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "dependsOn": [
                "Microsoft.Resources/deployments/vmSetupParamsTemplate",
                "Microsoft.Resources/deployments/glusterTemplate",
                "Microsoft.Resources/deployments/nfsHaTemplate",
                "Microsoft.Resources/deployments/recoveryTemplate",
                "Microsoft.Resources/deployments/networkTemplate",
                "Microsoft.Resources/deployments/dbTemplate",
                "Microsoft.Resources/deployments/redisTemplate",
                "Microsoft.Resources/deployments/storageAccountTemplate"
            ],
            "name": "controllerTemplate",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "lampCommon": {
                        "value": "[variables('lampCommon')]"
                    },
                    "subnetIdWeb": {
                        "value": "[reference('networkTemplate').outputs.subnetIdWeb.value]"
                    },
                    "ctlrPubIpId": {
                        "value": "[reference('networkTemplate').outputs.ctlrPubIpId.value]"
                    },
                    "vmSetupParamsObj": {
                        "value": "[reference('vmSetupParamsTemplate').outputs.vmSetupParamsObj.value]"
                    }
                },
                "templateLink": {
                    "uri": "[concat(variables('lampCommon').baseTemplateUrl,'controller.json',parameters('_artifactsLocationSasToken'))]"
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "dependsOn": [
                "Microsoft.Resources/deployments/vmSetupParamsTemplate",
                "Microsoft.Resources/deployments/controllerTemplate",
                "Microsoft.Resources/deployments/networkTemplate",
                "Microsoft.Resources/deployments/redisTemplate",
                "Microsoft.Resources/deployments/dbTemplate"
            ],
            "name": "scaleSetTemplate",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "lampCommon": {
                        "value": "[variables('lampCommon')]"
                    },
                    "subnetIdWeb": {
                        "value": "[reference('networkTemplate').outputs.subnetIdWeb.value]"
                    },
                    "vmSetupParamsObj": {
                        "value": "[reference('vmSetupParamsTemplate').outputs.vmSetupParamsObj.value]"
                    }
                },
                "templateLink": {
                    "uri": "[concat(variables('lampCommon').baseTemplateUrl,'webvmss.json',parameters('_artifactsLocationSasToken'))]"
                }
            }
        }
    ],
    "outputs": {
        "siteURL": {
            "type": "string",
            "value": "[variables('lampCommon').siteURL]"
        },
        "controllerInstanceIP": {
            "type": "string",
            "value": "[reference('controllerTemplate').outputs.controllerIP.value]"
        },
        "databaseDNS": {
            "type": "string",
            "value": "[reference('dbTemplate').outputs.dbFQDN.value]"
        },
        "databaseAdminUsername": {
            "type": "string",
            "value": "[variables('lampCommon').dbUsername]"
        },
        "databaseAdminPassword": {
            "type": "string",
            "value": "[variables('lampCommon').dbLoginPassword]"
        },
        "firstFrontendVmIP": {
            "type": "string",
            "value": "[reference('scaleSetTemplate').outputs.webvm1IP.value]"
        },
        "loadBalancerDNS": {
            "type": "string",
            "value": "[variables('lampCommon').lbDns]"
        },
        "loadBalancerSku": {
            "type": "string",
            "value": "[variables('lampCommon').lbSku]"
        }
    },
    "variables": {
        "documentation01": "This main-template calls multiple sub-templates to create the LAMP system",
        "documentation02": "    recoveryservices0   - dummy template (see next statement)",
        "documentation03": "    recoveryservices1   - creates a recovery vault that will be subsequently used by the VM Backup - a paramter swtich controls whethe is is called or bypassed",
        "documentation04": "    redis               - creates a redis cache",
        "documentation05": "    postgres / mysql  - creates a postgresql / mysql server",
        "documentation06": "    vnet                - creates a virtual network with three subnets",
        "documentation07": "    gluster             - creates a gluster file system on a vm farm",
        "documentation08": "    webvmss             - creates a vm scale set",
        "documentation09": "    controller          - creates a controller VM and deploys code",
        "documentation10": "GlusterFS Sizing guidance",
        "lampCommon": {
            "baseTemplateUrl": "[concat(parameters('_artifactsLocation'), 'nested/')]",
            "scriptLocation": "[concat(parameters('_artifactsLocation'), 'scripts/')]",
            "artifactsSasToken": "[parameters('_artifactsLocationSasToken')]",
            "appGwBePoolName": "[concat('appgw-bepool-', variables('resourceprefix'))]",
            "appGwName": "[concat('appgw-', variables('resourceprefix'))]",
            "appGwPipName": "[concat('appgw-pubip-',variables('resourceprefix'))]",
            "appGwSslCertKeyVaultResourceId": "[parameters('appGwSslCertKeyVaultResourceId')]",
            "appGwSslCertKeyVaultSecretName": "[parameters('appGwSslCertKeyVaultSecretName')]",
            "appGwSkuCapacity": "[parameters('appGwSkuCapacity')]",
            "appGwSkuName": "[parameters('appGwSkuName')]",
            "appGwSkuTier": "[parameters('appGwSkuTier')]",
            "applyScriptsSwitch": "[parameters('applyScriptsSwitch')]",
            "autoscaleVmCountMax": "[parameters('autoscaleVmCountMax')]",
            "autoscaleVmCountMin": "[parameters('autoscaleVmCountMin')]",
            "autoscaleVmSku": "[parameters('autoscaleVmSku')]",
            "azureBackupSwitch": "[parameters('azureBackupSwitch')]",
            "commonFunctionsScriptUri": "[concat(parameters('_artifactsLocation'),'scripts/helper_functions.sh',parameters('_artifactsLocationSasToken'))]",
            "controllerVmSku": "[parameters('controllerVmSku')]",
            "customVnetId": "[parameters('customVnetId')]",
            "ctlrNicName": "[concat('controller-vm-nic-',variables('resourceprefix'))]",
            "ctlrNsgName": "[concat('controller-nsg-',variables('resourceprefix'))]",
            "ctlrPipName": "[concat('controller-pubip-',variables('resourceprefix'))]",
            "ctlrVmName": "[concat('controller-vm-',variables('resourceprefix'))]",
            "ctlrVmSecrets": "[take(variables('ctlrVmSecretsArray'), if(empty(parameters('keyVaultResourceId')), 0, 1))]",
            "dbLogin": "[parameters('dbLogin')]",
            "dbLoginPassword": "[concat(substring(uniqueString(resourceGroup().id, deployment().name), 2, 11), '*7', toUpper('pfiwb'))]",
            "dbServerType": "[parameters('dbServerType')]",
            "dbUsername": "[concat(parameters('dbLogin'), '@', parameters('dbServerType'), '-', variables('resourceprefix'))]",
            "ddosPlanName": "[concat('ddos-plan-',variables('resourceprefix'))]",
            "ddosSwitch": "[parameters('ddosSwitch')]",
            "enableAccelNwForCtlrVmSwitch": "[parameters('enableAccelNwForCtlrVmSwitch')]",
            "enableAccelNwForOtherVmsSwitch": "[parameters('enableAccelNwForOtherVmsSwitch')]",
            "extBeName": "[concat('lb-backend-',variables('resourceprefix'))]",
            "extFeName": "[concat('lb-frontend-',variables('resourceprefix'))]",
            "extNatPool": "[concat('lb-natpool-',variables('resourceprefix'))]",
            "extProbeHTTP": "[concat('lb-probe-http-',variables('resourceprefix'))]",
            "extProbeHTTPS": "[concat('lb-probe-https-',variables('resourceprefix'))]",
            "fileServerDiskCount": "[parameters('fileServerDiskCount')]",
            "fileServerDiskSize": "[parameters('fileServerDiskSize')]",
            "fileServerType": "[parameters('fileServerType')]",
            "fileServerVmCount": 2,
            "fileServerVmSku": "[parameters('fileServerVmSku')]",
            "gatewayName": "[concat('vnet-gateway-',variables('resourceprefix'))]",
            "gatewayPublicIPName": "[concat('vnet-gw-ip-',variables('resourceprefix'))]",
            "gatewayType": "[parameters('gatewayType')]",
            "gfsNameRoot": "[concat('gluster-vm-',variables('resourceprefix'))]",
            "gfsAvailabilitySetName": "[concat('gluster-avset-',variables('resourceprefix'))]",
            "glusterScriptFilename": "install_gluster.sh",
            "htmlLocalCopySwitch": "[parameters('htmlLocalCopySwitch')]",
            "httpsTermination": "[parameters('httpsTermination')]",
            "lbDns": "[concat('lb-',variables('resourceprefix'),'.',parameters('location'),'.cloudapp.azure.com')]",
            "lbSku": "[parameters('loadBalancerSku')]",
            "lbName": "[concat('lb-',variables('resourceprefix'))]",
            "lbPipName": "[concat('lb-pubip-',variables('resourceprefix'))]",
            "location": "[parameters('location')]",
            "controllerInstallScriptFilename": "setup_controller.sh",
            "lampOnAzureConfigsJsonPath": "/var/lib/cloud/instance/lamp_on_azure_configs.json",
            "mssqlDbServiceObjectiveName": "[parameters('mssqlDbServiceObjectiveName')]",
            "mssqlDbSize": "[parameters('mssqlDbSize')]",
            "mssqlDbEdition": "[parameters('mssqlDbEdition')]",
            "mssqlVersion": "[parameters('mssqlVersion')]",
            "mysqlPgresSkuHwFamily": "[parameters('mysqlPgresSkuHwFamily')]",
            "mysqlPgresSkuName": "[concat(if(equals(parameters('mysqlPgresSkuTier'),'Basic'),'B', if(equals(parameters('mysqlPgresSkuTier'),'GeneralPurpose'),'GP', 'MO')), '_', parameters('mysqlPgresSkuHwFamily'), '_', string(parameters('mysqlPgresVcores')))]",
            "mysqlPgresSkuTier": "[parameters('mysqlPgresSkuTier')]",
            "mysqlPgresStgSizeGB": "[parameters('mysqlPgresStgSizeGB')]",
            "mysqlPgresVcores": "[parameters('mysqlPgresVcores')]",
            "mysqlVersion": "[parameters('mysqlVersion')]",
            "nfsByoIpExportPath": "[parameters('nfsByoIpExportPath')]",
            "nfsHaClientsIPRange": "[variables('subnetWebRange')]",
            "nfsHaExportPath": "/drbd/data",
            "nfsHaLbIP": "[concat(variables('subnetSanPrefix'), '.100')]",
            "nfsHaNode0IP": "[concat(variables('subnetSanPrefix'), '.110')]",
            "nfsHaNode1IP": "[concat(variables('subnetSanPrefix'), '.120')]",
            "osDiskStorageType": "[parameters('osDiskStorageType')]",
            "osType": {
                "offer": "UbuntuServer",
                "publisher": "Canonical",
                "sku": "16.04-LTS",
                "version": "latest"
            },
            "policyName": "[concat('policy-',variables('resourceprefix'))]",
            "postgresVersion": "[parameters('postgresVersion')]",
            "redisCacheName": "[concat('redis-',variables('resourceprefix'))]",
            "redisDeploySwitch": "[parameters('redisDeploySwitch')]",
            "redisDns": "[concat('redis-',variables('resourceprefix'),'.redis.cache.windows.net')]",
            "resourcesPrefix": "[variables('resourceprefix')]",
            "serverName": "[concat(parameters('dbServerType'), '-',variables('resourceprefix'))]",
            "siteURL": "[if(or(empty(parameters('siteURL')), equals(parameters('siteURL'), 'www.example.org')), concat(if(equals(parameters('httpsTermination'), 'AppGw'),'appgw-','lb-'),variables('resourceprefix'),'.',parameters('location'),'.cloudapp.azure.com'), parameters('siteURL'))]",
            "sshPublicKey": "[parameters('sshPublicKey')]",
            "sshUsername": "[parameters('sshUsername')]",
            "sslEnforcement": "[parameters('sslEnforcement')]",
            "storageAccountName": "[tolower(concat('abs',variables('resourceprefix')))]",
            "storageAccountType": "[parameters('storageAccountType')]",
            "subnetAppGw": "[concat('appgw-subnet-',variables('resourceprefix'))]",
            "subnetAppGwPrefix": "[concat(variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),6)))]",
            "subnetAppGwRange": "[concat(variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),6)), '.0/24')]",
            "subnetGateway": "GatewaySubnet",
            "subnetGatewayPrefix": "[concat(variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)))]",
            "subnetGatewayRange": "[concat(variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.0/24')]",
            "subnetRedis": "[concat('redis-subnet-',variables('resourceprefix'))]",
            "subnetRedisPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),3)))]",
            "subnetRedisRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),3)), '.0/24')]",
            "subnetSan": "[concat('san-subnet-',variables('resourceprefix'))]",
            "subnetSanPrefix": "[variables('subnetSanPrefix')]",
            "subnetSanRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),2)), '.0/24')]",
            "subnetWeb": "[concat('web-subnet-',variables('resourceprefix'))]",
            "subnetWebPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),0)))]",
            "subnetWebRange": "[variables('subnetWebRange')]",
            "thumbprintSslCert": "[if(or(empty(parameters('keyVaultResourceId')), empty(parameters('sslCertThumbprint'))), 'None', parameters('sslCertThumbprint'))]",
            "thumbprintCaCert": "[if(or(empty(parameters('keyVaultResourceId')), empty(parameters('caCertThumbprint'))), 'None', parameters('caCertThumbprint'))]",
            "vNetAddressSpace": "[parameters('vNetAddressSpace')]",
            "vaultName": "[concat('vault-',variables('resourceprefix'))]",
            "vmssName": "[concat('vmss-',variables('resourceprefix'))]",
            "vmssdStorageAccounttName": "[concat('vmss',uniqueString(resourceGroup().id))]",
            "vnetGwDeploySwitch": "[parameters('vnetGwDeploySwitch')]",
            "vnetName": "[concat('vnet-',variables('resourceprefix'))]",
            "vpnType": "[parameters('vpnType')]",
            "webServerSetupScriptFilename": "setup_webserver.sh"
        },
        "certUrlArray": [
            {
                "certificateUrl": "[parameters('sslCertKeyVaultURL')]"
            },
            {
                "certificateUrl": "[parameters('caCertKeyVaultURL')]"
            }
        ],
        "ctlrVmSecretsArray": [
            {
                "sourceVault": {
                    "id": "[parameters('keyVaultResourceId')]"
                },
                "vaultCertificates": "[take(variables('certUrlArray'), if(empty(parameters('caCertKeyVaultURL')), 1, 2))]"
            }
        ],
        "octets": "[split(parameters('vNetAddressSpace'), '.')]",
        "resourceprefix": "[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "subnetSanPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),2)))]",
        "subnetWebRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),0)), '.0/24')]"
    }
}
